{"version":3,"sources":["main.js"],"names":["canvas","document","getElementById","ctx","getContext","width","documentElement","clientWidth","height","clientHeight","lineWidth","last","painting","drawLine","x1","y1","x2","y2","beginPath","moveTo","lineTo","stroke","fillStyle","lineCap","isTouchDevice","ontouchmove","e","console","log","touches","clientX","clientY","onmousedown","onmousemove","onmouseup"],"mappings":";AAAA,IAAMA,EAASC,SAASC,eAAe,UACjCC,EAAMH,EAAOI,WAAW,MAE9BJ,EAAOK,MAAQJ,SAASK,gBAAgBC,YACxCP,EAAOQ,OAASP,SAASK,gBAAgBG,aAEzCN,EAAIO,UAAY,GAEhB,IACIC,EADAC,GAAW,EAEf,SAASC,EAASC,EAAIC,EAAIC,EAAIC,GAC5Bd,EAAIe,YACJf,EAAIgB,OAAOL,EAAIC,GACfZ,EAAIiB,OAAOJ,EAAIC,GACfd,EAAIkB,SAENlB,EAAImB,UAAY,MAChBnB,EAAIoB,QAAU,QACd,IAAIC,EAAgB,iBAAkBvB,SAASK,gBAC3CkB,EACFxB,EAAOyB,YAAc,SAAAC,GACnBC,QAAQC,IAAIF,GAKZb,EAJSa,EAAEG,QAAQ,GAAGC,QAAU,EACvBJ,EAAEG,QAAQ,GAAGE,QAAU,EACvBL,EAAEG,QAAQ,GAAGC,QAAU3B,EAAIO,UAC3BgB,EAAEG,QAAQ,GAAGE,QAAU5B,EAAIO,aAItCV,EAAOgC,YAAc,SAAAN,GACnBd,GAAW,EACXD,EAAO,CAACe,EAAEI,QAASJ,EAAEK,UAEvB/B,EAAOiC,YAAc,SAAAP,IACF,IAAbd,IACFC,EAASF,EAAK,GAAIA,EAAK,GAAIe,EAAEI,QAASJ,EAAEK,SACxCpB,EAAO,CAACe,EAAEI,QAASJ,EAAEK,WAIzB/B,EAAOkC,UAAY,WACjBtB,GAAW","file":"main.dfaf62a9.js","sourceRoot":"..\\src","sourcesContent":["const canvas = document.getElementById(\"canvas\")\r\nconst ctx = canvas.getContext(\"2d\")\r\n\r\ncanvas.width = document.documentElement.clientWidth\r\ncanvas.height = document.documentElement.clientHeight\r\n\r\nctx.lineWidth = 11\r\n\r\nlet painting = false\r\nlet last\r\nfunction drawLine(x1, y1, x2, y2) {\r\n  ctx.beginPath()\r\n  ctx.moveTo(x1, y1)\r\n  ctx.lineTo(x2, y2)\r\n  ctx.stroke()\r\n}\r\nctx.fillStyle = \"red\"\r\nctx.lineCap = \"round\"\r\nlet isTouchDevice = \"ontouchstart\" in document.documentElement\r\nif (isTouchDevice) {\r\n  canvas.ontouchmove = e => {\r\n    console.log(e)\r\n    let x1 = e.touches[0].clientX - 5\r\n    let y1 = e.touches[0].clientY - 5\r\n    let x2 = e.touches[0].clientX + ctx.lineWidth\r\n    let y2 = e.touches[0].clientY + ctx.lineWidth\r\n    drawLine(x1, y1, x2, y2)\r\n  }\r\n} else {\r\n  canvas.onmousedown = e => {\r\n    painting = true\r\n    last = [e.clientX, e.clientY]\r\n  }\r\n  canvas.onmousemove = e => {\r\n    if (painting === true) {\r\n      drawLine(last[0], last[1], e.clientX, e.clientY)\r\n      last = [e.clientX, e.clientY]\r\n    }\r\n  }\r\n\r\n  canvas.onmouseup = () => {\r\n    painting = false\r\n  }\r\n}\r\n"]}